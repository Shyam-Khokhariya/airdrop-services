service: airdropservices
frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: airdrop-service
  deploymentPrefix: serverless
  tracing: true

custom:
  pythonRequirements:
    fileName: airdrop/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 5
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-plugin-split-stacks
  - serverless-latest-layer-version
  - serverless-aws-documentation

documentation:
  models:
    - name: "ErrorMessage"
      contentType: "application/json"
      schema: ${file(documentation/models/error.json)}
    - name: "AirdropSchedule"
      contentType: "application/json"
      schema: ${file(documentation/models/airdrop_schedule.json):AirdropSchedule}
    - name: "AirdropRegistration"
      contentType: "application/json"
      schema: ${file(documentation/models/airdrop_registration.json):AirdropRegistration}

package:
  patterns:
    - "!.circleci/**"
    - "!.gitignore/**"
    - "!.serverless/**"
    - "!requirements.txt"
    - "!venv/**"
    - "!serverless.yml"
    - "!test/**"
    - "!tests/**"
    - "!repository/**"
    - "!Readme.md"
    - "!package.json"
    - "!Dockerfile"
    - "!License"
    - "!node_modules/**"

functions:
  get_active_airdrops:
        warmup: true
        handler: airdrop/application/handlers/airdrop_handlers.get_active_airdrops
        role: ${file(./config.${self:provider.stage}.json):ROLE}
        vpc:
          securityGroupIds:
            - ${file(./config.${self:provider.stage}.json):SG1}
            - ${file(./config.${self:provider.stage}.json):SG2}
          subnetIds:
            - ${file(./config.${self:provider.stage}.json):VPC1}
            - ${file(./config.${self:provider.stage}.json):VPC2}
        layers:
            - ${file(./config.${self:provider.stage}.json):MplaceCommonCode}
            - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
            - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
        events:
          - http:
              path: /airdrops
              method: post
              cors:
                origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
                headers:
                  - Content-Type
                  - X-Amz-Date
                  - Authorization
                  - X-Api-Key
                  - X-Amz-Security-Token
                  - X-Amz-User-Agent
                  - x-requested-with
              documentation:
                summary: "Get Airdrop schedule"
                description: "Get Airdrop schedule"
                tags:
                  - "airdrop"
                requestHeaders:
                  - name: "Content-Type"
                    description: "application/json"
                requestModels:
                  "application/json": "AirdropSchedule"
                methodResponses:
                  - statusCode: "200"
                    responseBody:
                      description: "Airdropschedule Data"
                      "application/json": "AirdropSchedule"
                    responseModels:
                      "application/json": "AirdropSchedule"
                  - statusCode: "400"
                    responseModels:
                      "application/json": "ErrorMessage"
  get_airdrop_schedules:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.get_airdrop_schedules
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):MplaceCommonCode}
        - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
        - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    events:
      - http:
          path: /airdrop-schedule
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get Airdrop schedule"
            description: "Get Airdrop schedule"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropSchedule"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdropschedule Data"
                  "application/json": "AirdropSchedule"
                responseModels:
                  "application/json": "AirdropSchedule"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  user_registration:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.user_registration
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):MplaceCommonCode}
        - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
        - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    events:
      - http:
          path: /airdrop/registration
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop user registration"
            description: "Airdrop user registration"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropRegistration"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "AirdropRegistration Data"
                  "application/json": "AirdropRegistration"
                responseModels:
                  "application/json": "AirdropRegistration"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  user_eligibility:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.user_eligibility
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):MplaceCommonCode}
        - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
        - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    events:
      - http:
          path: /airdrop/user-eligibility
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop user registration"
            description: "Airdrop user registration"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropRegistration"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "AirdropRegistration Data"
                  "application/json": "AirdropRegistration"
                responseModels:
                  "application/json": "AirdropRegistration"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
  airdrop_window_user_details:
    warmup: true
    handler: airdrop/application/handlers/airdrop_handlers.airdrop_window_user_details
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):MplaceCommonCode}
        - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib}
        - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc}
    events:
      - http:
          path: /airdrop/user-details
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Airdrop user registration"
            description: "Airdrop user registration"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropRegistration"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "AirdropRegistration Data"
                  "application/json": "AirdropRegistration"
                responseModels:
                  "application/json": "AirdropRegistration"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"  
