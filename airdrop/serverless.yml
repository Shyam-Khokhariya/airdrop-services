service: airdropservices
frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: airdrop-service
  deploymentPrefix: serverless
  tracing: true

custom:
  pythonRequirements:
    fileName: requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 5

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

documentation:
  models:
    - name: "ErrorMessage"
      contentType: "application/json"
      schema: ${file(documentation/models/error.json)}
    - name: "AirdropSchedule"
      contentType: "application/json"
      schema: ${file(documentation/models/airdrop_schedule.json):AirdropSchedule}

package:
  patterns:
    - "!.circleci/**"
    - "!.gitignore/**"
    - "!.serverless/**"
    - "!requirements.txt"
    - "!venv/**"
    - "!serverless.yml"
    - "!test/**"
    - "!tests/**"
    - "!repository/**"
    - "!Readme.md"
    - "!package.json"
    - "!Dockerfile"
    - "!License"
    - "!node_modules/**"

functions:
  get_airdrop_schedules:
    warmup: true
    handler: application/handlers/airdrop_handlers.get_airdrop_schedules
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /airdrop-schedule
          method: post
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get Airdrop schedule"
            description: "Get Airdrop schedule"
            tags:
              - "airdrop"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "AirdropSchedule"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Airdropschedule Data"
                  "application/json": "AirdropSchedule"
                responseModels:
                  "application/json": "AirdropSchedule"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorMessage"
